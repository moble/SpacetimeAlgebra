<?xml version="1.0" encoding="utf-8" ?>

<g25spec
    license="custom"
    language="cpp"
    namespace="SpacetimeAlgebra"
    coordStorage="array"
    defaultOperatorBindings="true"
    dimension="4"
    reportUsage="false"
    gmvCode="expand"
    parser="builtin"
    testSuite="true"
    copyright="Copyright (c) 2014 Mike Boyle"
>

<customLicense>
Licensed under the  MIT license; see LICENSE file for full details.
</customLicense>

<outputFilename
    defaultName="SpacetimeAlgebra.h"
    customName="SpacetimeAlgebra.hpp" />

<!-- <verbatim filename="SpacetimeAlgebra.hpp" position="before" marker="namespace SpacetimeAlgebra {"> -->
<!-- // Any verbatim text should be placed here -->
<!-- </verbatim> -->

<!-- Inline all possible functions -->
<inline
    constructors="true"
    set="true"
    assign="true"
    operators="true"
    functions="true"
    />

<floatType type="double" />

<basisVectorNames
    name1="gamma_0"
    name2="gamma_1"
    name3="gamma_2"
    name4="gamma_3"
    />

<!-- Define the basis -->
<metric name="default">gamma_0.gamma_0=-1</metric>
<metric name="default">gamma_1.gamma_1=gamma_2.gamma_2=gamma_3.gamma_3=1</metric>

<!-- General multivectors -->
<mv name="mv" compress="byGrade" coordinateOrder="default" memAlloc="full"></mv>

<!-- The basic vectors -->
<smv name="gamma_0" const="true" type="blade">gamma_0=1</smv>
<smv name="gamma_1" const="true" type="blade">gamma_1=1</smv>
<smv name="gamma_2" const="true" type="blade">gamma_2=1</smv>
<smv name="gamma_3" const="true" type="blade">gamma_3=1</smv>

<!-- Synonyms for the basic vectors -->
<smv name="t" const="true" type="blade">gamma_0=1</smv>
<smv name="x" const="true" type="blade">gamma_1=1</smv>
<smv name="y" const="true" type="blade">gamma_2=1</smv>
<smv name="z" const="true" type="blade">gamma_3=1</smv>

<!-- Some nice pseudoscalars -->
<smv name="I3" const="true" type="blade">gamma_1^gamma_2^gamma_3=1</smv>
<smv name="I" const="true" type="blade">gamma_0^gamma_1^gamma_2^gamma_3=1</smv>

<!-- Important sub-types of multivectors -->
<smv name="vector" type="blade">
  gamma_0 gamma_1 gamma_2 gamma_3
</smv>
<smv name="vector3" type="blade">
  gamma_1 gamma_2 gamma_3
</smv>
<smv name="bivector" type="blade">
  gamma_0^gamma_1 gamma_0^gamma_2 gamma_0^gamma_3
  gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
</smv>
<smv name="bivector3" type="blade">
  gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
</smv>
<smv name="rotor" type="versor">
  scalar
  gamma_0^gamma_1 gamma_0^gamma_2 gamma_0^gamma_3
  gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
  gamma_0^gamma_1^gamma_2^gamma_3
</smv>
<smv name="rotor3" type="versor">
  scalar
  gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
</smv>


<!-- Converters between specialized types -->
<function name="_vector" arg1="mv" />
<function name="_vector3" arg1="vector" />
<function name="_rotor3" arg1="rotor" />

<!-- Grade extraction -->
<!-- Note that some grades and certain combinations of grades can -->
<!-- be extracted by the functions among the above converters. -->
<function name="extractGrade" arg1="mv" /> <!-- Needed internally for the following -->
<function name="extractGrade0" arg1="mv" />
<function name="extractGrade1" arg1="mv" />
<function name="extractGrade2" arg1="mv" />
<function name="extractGrade3" arg1="mv" />
<function name="extractGrade4" arg1="mv" />

<!-- Basic vector operators -->
<function name="add" arg1="mv" arg2="mv" />
<function name="subtract" arg1="mv" arg2="mv" />
<function name="div" arg1="mv" arg2="double" floatType="double" />

<!-- Geometric operations -->
<function name="gp" arg1="mv" arg2="mv" /> <!-- geometric product -->
<function name="gp" arg1="mv" arg2="double" /> <!-- geometric product -->
<function name="rc" arg1="mv" arg2="mv" /> <!-- right contraction -->
<function name="lc" arg1="mv" arg2="mv" /> <!-- left contraction -->
<function name="sp" arg1="mv" arg2="mv" /> <!-- scalar product -->
<function name="op" arg1="mv" arg2="mv" /> <!-- outer product -->

<!-- Dualization and involutions -->
<function name="dual" arg1="mv" />
<function name="negate" arg1="mv" />
<function name="reverse" arg1="mv" />
<function name="cliffordConjugate" arg1="mv" />
<function name="gradeInvolution" arg1="mv" />

<!-- Norms and normalization -->
<function name="norm" arg1="mv" />
<function name="norm2" arg1="mv" />
<function name="unit" arg1="mv" /> <!-- I believe this normalizes a multivector... -->
<function name="versorInverse" arg1="mv" />

<!-- Transcendental functions -->
<function name="sas" arg1="mv" arg2="double" arg3="double"/> <!-- Needed internally for the following -->
<!-- <function name="log" arg1="mv" /> --> <!-- log is only implemented for 3d Euclidean multivectors -->
<function name="exp" arg1="mv" />
<function name="sin" arg1="mv" />
<function name="cos" arg1="mv" />
<function name="sinh" arg1="mv" />
<function name="cosh" arg1="mv" />

<!-- Rotor operations -->
<!-- <function name="applyVersor" arg1="rotor" arg2="mv" /> -->
<function name="applyVersor" arg1="rotor" arg2="vector" />
<!-- <function name="applyVersor" arg1="rotor" argName1="R" arg2="mv" argName2="v" /> -->
<!-- <function name="applyVersor" arg1="rotor" argName1="R" arg2="vector" argName2="v" /> -->
<function name="applyUnitVersor" arg1="rotor3" argName1="R" arg2="vector3" argName2="v" />




<!-- Needed for tests -->
<function name="random_double" outputName="genrand" optionGen="mt" />

</g25spec>
