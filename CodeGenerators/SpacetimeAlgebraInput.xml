<?xml version="1.0" encoding="utf-8" ?>

<g25spec
    license="custom"
    language="cpp"
    namespace="SpacetimeAlgebra"
    coordStorage="array"
    defaultOperatorBindings="true"
    dimension="4"
    reportUsage="false"
    gmvCode="expand"
    parser="builtin"
    testSuite="true">

  <customLicense>
    Licensed under the  MIT license; see LICENSE file for full details.
    Copyright (c) 2014 Mike Boyle
  </customLicense>

  <outputFilename
      defaultName="SpacetimeAlgebra.h"
      customName="SpacetimeAlgebra.hpp"/>

  <!-- <verbatim filename="SpacetimeAlgebra.hpp" position="before" marker="namespace SpacetimeAlgebra {"> -->
  <!-- // Any verbatim text should be placed here -->
  <!-- </verbatim> -->

  <!-- Inline all possible functions -->
  <inline
      constructors="true"
      set="true"
      assign="true"
      operators="true"
      functions="true"
     />

  <floatType type="double"/>

  <!-- Define the basis -->
  <basisVectorNames
      name1="gamma_0"
      name2="gamma_1"
      name3="gamma_2"
      name4="gamma_3"
     />
  <metric name="default">gamma_0.gamma_0=-1</metric>
  <metric name="default">gamma_1.gamma_1=gamma_2.gamma_2=gamma_3.gamma_3=1</metric>
  <metric name="Euclidean">gamma_1.gamma_1=gamma_2.gamma_2=gamma_3.gamma_3=1</metric>

  <!-- General multivectors -->
  <mv name="mv" compress="byGrade" coordinateOrder="default" memAlloc="full"/>

  <!-- The basic vectors -->
  <smv name="gamma_0" const="true" type="blade">gamma_0=1</smv>
  <smv name="gamma_1" const="true" type="blade">gamma_1=1</smv>
  <smv name="gamma_2" const="true" type="blade">gamma_2=1</smv>
  <smv name="gamma_3" const="true" type="blade">gamma_3=1</smv>

  <!-- The two important pseudoscalars -->
  <smv name="I" const="true" type="blade">gamma_0^gamma_1^gamma_2^gamma_3=1</smv>
  <smv name="I3" const="true" type="blade">gamma_1^gamma_2^gamma_3=1</smv>

  <!-- Important sub-types of multivectors -->
  <smv name="mv3" type="multivector">
    scalar
    gamma_1 gamma_2 gamma_3
    gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
    gamma_1^gamma_2^gamma_3
  </smv>
  <smv name="vector" type="blade">
    gamma_0 gamma_1 gamma_2 gamma_3
  </smv>
  <smv name="vector3" type="blade">
    gamma_1 gamma_2 gamma_3
  </smv>
  <smv name="bivector" type="blade">
    gamma_0^gamma_1 gamma_0^gamma_2 gamma_0^gamma_3
    gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
  </smv>
  <smv name="bivector3" type="blade">
    gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
  </smv>
  <smv name="pseudovector" type="blade">
    gamma_0^gamma_1^gamma_2
    gamma_0^gamma_1^gamma_3
    gamma_0^gamma_2^gamma_3
    gamma_1^gamma_2^gamma_3
  </smv>
  <smv name="spinor" type="versor">
    scalar
    gamma_0^gamma_1 gamma_0^gamma_2 gamma_0^gamma_3
    gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
    gamma_0^gamma_1^gamma_2^gamma_3
  </smv>
  <smv name="spinor3" type="versor">
    scalar
    gamma_1^gamma_2 gamma_1^gamma_3 gamma_2^gamma_3
  </smv>

  <!-- Converters between specialized types -->
  <!-- <function name="_vector" arg1="mv"/> -->
  <!-- <function name="_bivector" arg1="mv"/> -->
  <!-- <function name="_spinor" arg1="mv"/> -->
  <!-- <function name="_vector3" arg1="mv"/> -->
  <!-- <function name="_bivector3" arg1="mv"/> -->
  <!-- <function name="_spinor3" arg1="mv"/> -->
  <function name="_vector3" arg1="vector"/>
  <function name="_bivector3" arg1="bivector"/>
  <function name="_spinor3" arg1="spinor"/>

  <!-- Grade extraction -->
  <!-- Note that some grades and certain combinations of grades can -->
  <!-- be extracted by the functions among the above converters. -->
  <function name="extractGrade" arg1="mv"/> <!-- Needed internally for the following -->
  <function name="extractGrade0" arg1="anysmv"/>
  <function name="extractGrade1" arg1="anysmv"/>
  <function name="extractGrade2" arg1="anysmv"/>
  <function name="extractGrade3" arg1="anysmv"/>
  <function name="extractGrade4" arg1="anysmv"/>

  <!-- Basic vector operators -->
  <function name="add" arg1="anysmv" arg2="anysmv"/>
  <function name="subtract" arg1="anysmv" arg2="anysmv"/>
  <function name="gp" arg1="double" arg2="anysmv"/> <!-- scalar multiplication -->
  <function name="gp" arg1="anysmv" arg2="double"/> <!-- scalar multiplication -->
  <function name="div" arg1="anysmv" arg2="double"/> <!-- scalar division -->

  <!-- Geometric operations -->
  <function name="gp" arg1="mv" arg2="mv"/> <!-- geometric product -->
  <function name="gp" arg1="spinor" arg2="spinor"/> <!-- geometric product -->
  <function name="gp" arg1="spinor3" arg2="spinor3"/> <!-- geometric product -->
  <function name="rc" arg1="mv" arg2="mv"/> <!-- right contraction -->
  <function name="lc" arg1="mv" arg2="mv"/> <!-- left contraction -->
  <function name="sp" arg1="anysmv" arg2="anysmv"/> <!-- scalar product -->
  <function name="op" arg1="mv" arg2="mv"/> <!-- outer product -->
  <function name="op" arg1="vector" arg2="vector"/> <!-- outer product -->
  <function name="op" arg1="vector3" arg2="vector3"/> <!-- outer product -->
  <function name="op" arg1="bivector" arg2="bivector"/> <!-- outer product -->
  <function name="op" arg1="bivector3" arg2="bivector3"/> <!-- outer product -->

  <!-- Dualization and involutions -->
  <function name="dual" arg1="anysmv4"/>
  <function name="negate" arg1="anysmv"/>
  <function name="reverse" arg1="anysmv"/>
  <function name="cliffordConjugate" arg1="anysmv"/>
  <function name="gradeInvolution" arg1="anysmv"/>

  <!-- Norms and normalization -->
  <function name="norm" arg1="anysmv"/>
  <function name="norm2" arg1="anysmv"/>
  <function name="norm2" arg1="mv" outputName="norm2_euclidean" metric="Euclidean"/>
  <function name="unit" arg1="anysmv"/> <!-- I believe this normalizes a multivector... -->
  <function name="versorInverse" arg1="anyssmv"/>

  <!-- Transcendental functions -->
  <function name="sas" arg1="anyssmv" arg2="double" arg3="double"/> <!-- Needed internally for the following -->
  <function name="log" arg1="mv3" optionType="euclidean" metric="Euclidean"/> <!-- log is only implemented for 3d Euclidean multivectors -->
  <function name="log" arg1="spinor3" optionType="euclidean" metric="Euclidean"/> <!-- log is only implemented for 3d Euclidean multivectors -->
  <function name="exp" arg1="anyssmv"/>
  <function name="sin" arg1="anyssmv"/>
  <function name="cos" arg1="anyssmv"/>
  <function name="sinh" arg1="anyssmv"/>
  <function name="cosh" arg1="anyssmv"/>

  <!-- Spinor operations -->
  <function name="applyVersor" arg1="spinor" argName1="R" arg2="vector" argName2="v"/>
  <function name="applyUnitVersor" arg1="spinor3" argName1="R" arg2="vector3" argName2="v"/>

  <!-- Needed for tests -->
  <function name="random_double" outputName="genrand" optionGen="mt"/>

</g25spec>
